import pytest

import conin.hmm
import conin.hmm.algebraic_chmm

import conin.hmm.tests.test_cases as tc


class Test_IndexSets1:

    def test_HMM(self):
        hmm = tc.create_hmm1()
        assert hmm is not None

    def test_data(self):
        hmm = tc.create_hmm1()
        assert hmm.num_hidden_states == 2
        assert hmm.start_vec == [0.4, 0.6]
        assert hmm.emission_mat == [[0.7, 0.3], [0.4, 0.6]]
        assert hmm.transition_mat == [[0.9, 0.1], [0.2, 0.8]]

    def test_index_sets(self):
        hmm = tc.create_hmm1()
        data = conin.hmm.algebraic_chmm._create_index_sets(
            hmm=hmm, observations=["o0", "o1", "o0", "o1", "o0"]
        )
        assert data.E == [
            (0, -1, 0),
            (0, -1, 1),
            (1, 0, 0),
            (1, 0, 1),
            (1, 1, 0),
            (1, 1, 1),
            (2, 0, 0),
            (2, 0, 1),
            (2, 1, 0),
            (2, 1, 1),
            (3, 0, 0),
            (3, 0, 1),
            (3, 1, 0),
            (3, 1, 1),
            (4, 0, 0),
            (4, 0, 1),
            (4, 1, 0),
            (4, 1, 1),
            (5, 0, -2),
            (5, 1, -2),
        ]
        assert data.F == {(0, 1), (1, 0), (1, 1), (0, 0)}
        assert data.FF == set()
        assert data.Gt == {
            (0, -1, 0): -0.916290731874155,
            (0, -1, 1): -0.5108256237659907,
            (1, 0, 0): -0.10536051565782628,
            (1, 0, 1): -2.3025850929940455,
            (1, 1, 0): -1.6094379124341003,
            (1, 1, 1): -0.2231435513142097,
            (2, 0, 0): -0.10536051565782628,
            (2, 0, 1): -2.3025850929940455,
            (2, 1, 0): -1.6094379124341003,
            (2, 1, 1): -0.2231435513142097,
            (3, 0, 0): -0.10536051565782628,
            (3, 0, 1): -2.3025850929940455,
            (3, 1, 0): -1.6094379124341003,
            (3, 1, 1): -0.2231435513142097,
            (4, 0, 0): -0.10536051565782628,
            (4, 0, 1): -2.3025850929940455,
            (4, 1, 0): -1.6094379124341003,
            (4, 1, 1): -0.2231435513142097,
        }
        assert data.Ge == {
            (0, 0): -0.35667494393873245,
            (0, 1): -0.916290731874155,
            (1, 0): -1.2039728043259361,
            (1, 1): -0.5108256237659907,
            (2, 0): -0.35667494393873245,
            (2, 1): -0.916290731874155,
            (3, 0): -1.2039728043259361,
            (3, 1): -0.5108256237659907,
            (4, 0): -0.35667494393873245,
            (4, 1): -0.916290731874155,
        }


class Test_IndexSets2:

    def test_HMM(self):
        hmm = tc.create_hmm2()
        assert hmm is not None

    def test_data(self):
        hmm = tc.create_hmm2()
        assert hmm.num_hidden_states == 3
        assert hmm.start_vec == [0.4, 0.6, 0.0]
        assert hmm.emission_mat == [[0.7, 0.3, 0.0], [0.4, 0.6, 0.0], [0.0, 0.0, 1.0]]
        assert hmm.transition_mat == [
            [0.8, 0.1, 0.1],
            [0.2, 0.7, 0.1],
            [0.0, 0.0, 1.0],
        ]

    def test_index_sets(self):
        hmm = tc.create_hmm2()
        data = conin.hmm.algebraic_chmm._create_index_sets(
            hmm=hmm, observations=["o0", "o1", "o0", "o1", "o0", "o2"]
        )
        assert data.E == [
            (0, -1, 0),
            (0, -1, 1),
            (1, 0, 0),
            (1, 0, 1),
            (1, 1, 0),
            (1, 1, 1),
            (2, 0, 0),
            (2, 0, 1),
            (2, 1, 0),
            (2, 1, 1),
            (3, 0, 0),
            (3, 0, 1),
            (3, 1, 0),
            (3, 1, 1),
            (4, 0, 0),
            (4, 0, 1),
            (4, 1, 0),
            (4, 1, 1),
            (5, 0, 2),
            (5, 1, 2),
            (6, 2, -2),
        ]
        assert data.F == {(0, 1), (1, 0), (1, 1), (0, 0), (0, 2), (1, 2)}
        assert data.FF == {
            (0, -1, 2),
            (1, 0, 2),
            (1, 1, 2),
            (2, 0, 2),
            (2, 1, 2),
            (3, 0, 2),
            (3, 1, 2),
            (4, 0, 2),
            (4, 1, 2),
            (5, 0, 1),
            (5, 1, 1),
            (5, 0, 0),
            (5, 1, 0),
        }
        assert data.Gt == {
            (0, -1, 0): -0.916290731874155,
            (0, -1, 1): -0.5108256237659907,
            (1, 0, 0): -0.2231435513142097,
            (1, 0, 1): -2.3025850929940455,
            (1, 1, 0): -1.6094379124341003,
            (1, 1, 1): -0.35667494393873245,
            (2, 0, 0): -0.2231435513142097,
            (2, 0, 1): -2.3025850929940455,
            (2, 1, 0): -1.6094379124341003,
            (2, 1, 1): -0.35667494393873245,
            (3, 0, 0): -0.2231435513142097,
            (3, 0, 1): -2.3025850929940455,
            (3, 1, 0): -1.6094379124341003,
            (3, 1, 1): -0.35667494393873245,
            (4, 0, 0): -0.2231435513142097,
            (4, 0, 1): -2.3025850929940455,
            (4, 1, 0): -1.6094379124341003,
            (4, 1, 1): -0.35667494393873245,
            (5, 0, 2): -2.3025850929940455,
            (5, 1, 2): -2.3025850929940455,
        }
        assert data.Ge == {
            (0, 0): -0.35667494393873245,
            (0, 1): -0.916290731874155,
            (1, 0): -1.2039728043259361,
            (1, 1): -0.5108256237659907,
            (2, 0): -0.35667494393873245,
            (2, 1): -0.916290731874155,
            (3, 0): -1.2039728043259361,
            (3, 1): -0.5108256237659907,
            (4, 0): -0.35667494393873245,
            (4, 1): -0.916290731874155,
            (5, 2): 0.0,
        }
